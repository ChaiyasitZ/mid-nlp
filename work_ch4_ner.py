# -*- coding: utf-8 -*-
"""Work-CH4-NER

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UMmjHqscI6Qi4JU12cSaUEHu7sqqKKRc

**Basic Recommendation System** using **Named Entity Recognition** (NER) from **spaCy**

The recommend_content function:

- Converts the user's list of entities into a set for efficient searching.
- Iterates through each item in the content database.
- Extracts entities from the text of each content item.
- Recommends content if any of the user’s entities match any of the entities extracted from the content.
- Returns a list of recommended content that includes at least one of the user’s specified entities.

The **recommend_content** function performs the following tasks:

- Converts the user's list of entities into a set for efficient searching.
- Iterates through each piece of content in the database.
- Extracts entities from each content item and converts them into a set.
- Checks if all user entities are a subset of the content's entities.
- If all user entities are present in the content, the content is added to the list of recommendations.
- Returns the list of recommended content.
"""

# ==========================================
# 🧠 Entity-Based Content Recommendation System
# ==========================================

# 1. Upload wiki_article files
from google.colab import files
import spacy

print("📁 Please upload your article files (e.g., wiki_article_0.txt, wiki_article_1.txt)...")
uploaded = files.upload()

# 2. Read uploaded files into a dictionary
docs = {fname: data.decode('utf-8') for fname, data in uploaded.items()}

# 3. Load spaCy English NER model
print("🔍 Loading spaCy model...")
nlp = spacy.load("en_core_web_sm")

# 4. Function: Extract named entities from text
def extract_entities(text):
    doc = nlp(text)
    return [ent.text.lower() for ent in doc.ents]

# 5. Build content database with pre-extracted entities
content_db = []
for fname, text in docs.items():
    entities = set(extract_entities(text))
    content_db.append({
        "filename": fname,
        "entities": entities,
        "text": text
    })

# 6. Function: Recommend content based on user entities
def recommend_content(user_entities, content_db):
    user_set = set(user_entities)
    return [entry for entry in content_db if user_set & entry["entities"]]

# 7. Function: Display recommendations with preview
def display_recommendations(recommendations, user_set):
    print("\n✅ Recommended documents:\n")
    for doc in recommendations:
        matched = doc["entities"] & user_set
        preview = doc["text"][:200].replace('\n', ' ') + "..."
        print(f" • {doc['filename']} (matched: {', '.join(matched)})")
        print(f"   Preview: {preview}\n")

# 8. 🔁 Start Interactive Search Loop
print("\n✨ You can now search articles by typing a sentence describing your interests.")
print("Type 'exit' or press Enter to quit.\n")

while True:
    user_input = input("📝 Enter your interest: ").strip()
    if user_input.lower() in ('exit', 'quit', 'q', ''):
        print("👋 Session ended. Thank you!")
        break

    user_ents = extract_entities(user_input)
    print(f"\n🔎 Detected named entities: {user_ents}")

    if not user_ents:
        print("⚠️ No named entities detected. Try using names of people, places, or organizations.\n")
        continue

    recommended = recommend_content(user_ents, content_db)
    if recommended:
        display_recommendations(recommended, set(user_ents))
    else:
        print("😕 No documents match your entities.")

    print("\n" + "-"*60 + "\n")