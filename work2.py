# -*- coding: utf-8 -*-
"""Work2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1frmEDDocrqT1k1eOegZBg-JlHvGPunTE

**Charting word length with nltk**
"""

from matplotlib import pyplot as plt
plt.hist([1, 5, 5, 7, 7, 7, 9])

plt.show()

"""The Punkt tokenizer is a pre-trained unsupervised machine learning model that can tokenize a text into sentences and words."""

import nltk
nltk.download('punkt')
nltk.download('punkt_tab')

from matplotlib import pyplot as plt
from nltk.tokenize import word_tokenize

words = word_tokenize("This is a pretty cool tool!")
print(words)
word_lengths = [len(w) for w in words]
plt.hist(word_lengths)

plt.show()

"""**Let's practice!**

*   Find and chart the number of words per line in the script using **matplotlib**.
*   Read txt file (holy_grail.txt) and keep in **holy_grail**
"""

import io
from google.colab import files

# Upload the file
uploaded = files.upload()

# Read the content of the uploaded file
with io.StringIO(uploaded['holy_grail.txt'].decode('utf-8')) as f:
    holy_grail = f.read()

# Display the content
print(holy_grail)

# Split the script into lines: lines
lines = holy_grail.split('\n')
len(lines)

"""
*   Use **re.sub()** inside a list comprehension to replace the prompts such as **ARTHUR**: and **SOLDIER #1**. The pattern has been written for you.
*   Use a list comprehension to tokenize **lines** with **regexp_tokenize()**, keeping only words. Recall that the pattern for words is **"\w+"**.

"""

import re
from nltk.tokenize import regexp_tokenize

# Replace all script lines for speaker
pattern = "[A-Z]{2,}(\s)?(#\d)?([A-Z]{2,})?:"
lines = [re.sub(pattern, '', l) for l in lines]
print(lines)

# Tokenize each line: tokenized_lines
tokenized_lines = [regexp_tokenize(s, "\w+") for s in lines]
print(tokenized_lines)

"""
*   Use a list comprehension to create a list of line lengths called **line_num_words**.
*   Use **t_line** as your iterator variable to iterate over **tokenized_lines**, and then **len()** function to compute line lengths.
*   Plot a histogram of **line_num_words** using **plt.hist()**. Don't forgot to use **plt.show()** as well to display the plot.


"""

# Make a frequency list of lengths: line_num_words
line_num_words = [len(t_line) for t_line in tokenized_lines]
line_num_words.sort()
print(line_num_words)

# Plot a histogram of the line lengths
plt.hist(line_num_words)

# Show the plot
plt.show()

"""**Work2**"""

# แยกคำที่เป็นตัวอักษรเท่านั้น
words = re.findall(r'\b[a-zA-Z]+\b', holy_grail)

# แปลงอักษรตัวแรกให้เป็นตัวพิมพ์ใหญ่
first_letters = [word[0].upper() for word in words]

# สร้าง dict ว่างสำหรับเก็บผลลัพธ์
counter = {}

# นับจำนวนคำขึ้นต้นแต่ละตัว
for letter in first_letters:
    if letter in counter:
        counter[letter] += 1
    else:
        counter[letter] = 1

# เตรียมลำดับตัวอักษร A-Z
alphabet = [chr(i) for i in range(ord('A'), ord('Z')+1)]
counts = [counter.get(letter, 0) for letter in alphabet]

# วาดกราฟ
plt.figure(figsize=(12, 6))
plt.bar(alphabet, counts, color='mediumpurple')
plt.xlabel('Starting Letter (A-Z)')
plt.ylabel('Word Count')
plt.title('Word Counts by Starting Letter (A-Z) in holy_grail.txt')
plt.grid(axis='y', linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()